package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

// Число воркеров
var workers int = 5

func worker(id int, jobs <-chan interface{}, wg *sync.WaitGroup) {
	defer wg.Done()
	for job := range jobs {
		fmt.Fprintf(os.Stdout, "Воркер #%d начал работу: %v\n", id, job)
		// Время, затраченное на какую-то работу
		time.Sleep(100 * time.Millisecond)
		fmt.Fprintf(os.Stdout, "Воркер #%d закончил работу: %v\n", id, job)
	}
}

func main() {
	// Тип interface{} канала позволяет хранить данные разных типов
	jobs := make(chan interface{})
	wg := new(sync.WaitGroup)

	// Создаем контекст, который отлавливает сигнал SIGINT
	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT)
	defer cancel()

	// Работа воркеров
	for i := 1; i <= workers; i++ {
		wg.Add(1)
		go worker(i, jobs, wg)
	}

	for {
		select {
		// По сигналу SIGINT сработает контекст
		case <-ctx.Done():
			// Завершаем работу воркеров
			// После сигнала все воркеры завершат свою работу
			close(jobs)
			wg.Wait()
			return
		case jobs <- 42:
		case jobs <- 3.14:
		case jobs <- "test":
		case jobs <- false:
		case jobs <- []int{1, 2, 3, 4, 5}:
		}
	}
}

// Воркер #3 начал работу: test
// Воркер #2 начал работу: 3.14
// Воркер #5 начал работу: [1 2 3 4 5]
// Воркер #4 начал работу: test
// Воркер #1 начал работу: [1 2 3 4 5]
// Воркер #1 закончил работу: [1 2 3 4 5]
// Воркер #1 начал работу: [1 2 3 4 5]
// Воркер #3 закончил работу: test
// Воркер #3 начал работу: false
// Воркер #4 закончил работу: test
// Воркер #4 начал работу: [1 2 3 4 5]
// Воркер #2 закончил работу: 3.14
// Воркер #2 начал работу: test
// Воркер #5 закончил работу: [1 2 3 4 5]
// Воркер #5 начал работу: test
// Воркер #3 закончил работу: false
// Воркер #3 начал работу: 3.14
// Воркер #1 закончил работу: [1 2 3 4 5]
// Воркер #1 начал работу: 42
// Воркер #4 закончил работу: [1 2 3 4 5]
// Воркер #4 начал работу: false
// Воркер #2 закончил работу: test
// Воркер #2 начал работу: 3.14
// Воркер #5 закончил работу: test
// Воркер #5 начал работу: 3.14
// Воркер #1 закончил работу: 42
// Воркер #1 начал работу: test
// Воркер #3 закончил работу: 3.14
// Воркер #3 начал работу: 3.14
// Воркер #4 закончил работу: false
// Воркер #4 начал работу: [1 2 3 4 5]
// Воркер #2 закончил работу: 3.14
// Воркер #2 начал работу: 3.14
// Воркер #5 закончил работу: 3.14
// Воркер #5 начал работу: test
// Воркер #5 закончил работу: test
// Воркер #3 закончил работу: 3.14
// Воркер #1 закончил работу: test
// Воркер #2 закончил работу: 3.14
// Воркер #4 закончил работу: [1 2 3 4 5]
